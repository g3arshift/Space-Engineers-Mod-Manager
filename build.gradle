/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id("com.gradleup.shadow") version "8.3.5"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://openjfx.io/repo')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}


dependencies {
    api libs.org.apache.commons.commons.lang3
    api libs.commons.io.commons.io
    api libs.net.raumzeitfalle.fx.scenic.view
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.24.3'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.3'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.24.3'
    api libs.org.jsoup.jsoup
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.27.0'
    api libs.org.mockito.mockito.core
    api libs.org.openjfx.javafx.controls
    api libs.org.openjfx.javafx.fxml
    api libs.org.openjfx.javafx.graphics
    api libs.org.openjfx.javafx.web
    api libs.org.kordamp.ikonli.ikonli.javafx
    api libs.org.kordamp.ikonli.ikonli.carbonicons.pack
    api libs.io.github.mkpaz.atlantafx.styles
    api libs.io.github.mkpaz.atlantafx.base
    api libs.org.openjfx.javafx.media
    api libs.net.java.dev.jna.jna
    api libs.net.java.dev.jna.jna.platform
    api libs.jakarta.xml.bind.jakarta.xml.bind.api
    api libs.com.sun.xml.bind.jaxb.impl
    api libs.com.sun.xml.bind.jaxb.core
    api libs.org.jetbrains.annotations
    api libs.org.jetbrains.kotlin.kotlin.stdlib.jdk8
    api libs.org.apache.maven.plugins.maven.jlink.plugin
    api libs.org.apache.commons.commons.compress
    api libs.org.iq80.snappy.snappy
    testImplementation libs.org.junit.jupiter.junit.jupiter
    testImplementation libs.org.testfx.testfx.core
    testImplementation libs.org.jetbrains.kotlin.kotlin.test
    compileOnly libs.org.projectlombok.lombok
    annotationProcessor libs.org.projectlombok.lombok
}

group = 'com.gearshiftgaming.se_mod_manager'
version = '0.5.1'
description = 'Space-Engineers-Mod-Manager'
java.sourceCompatibility = JavaVersion.VERSION_21

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    duplicatesStrategy = 'EXCLUDE'
}

tasks.register('makeFatJar', Jar) {
    manifest {
        attributes 'Main-Class': 'com.gearshiftgaming.se_mod_manager.SpaceEngineersModManager'
    }
    archiveBaseName = 'Space-Engineers-Mod-Manager'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

def generatedVersionDir = "./src/main/resources"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

tasks.register('generateVersionProperties') {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
compileJava.dependsOn generateVersionProperties

tasks.register('printVersionInformation') {
    println(version)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}